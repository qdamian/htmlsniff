===============================
htmlviz
===============================


.. image:: https://img.shields.io/pypi/v/htmlviz.svg
        :target: https://pypi.python.org/pypi/htmlviz

.. image:: https://img.shields.io/travis/qdamian/htmlviz.svg
        :target: https://travis-ci.org/qdamian/htmlviz

.. image:: https://readthedocs.org/projects/htmlviz/badge/?version=latest
        :target: https://htmlviz.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status

.. image:: https://pyup.io/repos/github/qdamian/htmlviz/shield.svg
     :target: https://pyup.io/repos/github/qdamian/htmlviz/
     :alt: Updates

HTML visualization for Python

.. image:: logo.png

Helps you visualize your app's HTTP traffic using sequence diagrams generated by
the amazing PlantUML_.

* Free software: MIT license
* Documentation: https://htmlviz.readthedocs.io


Features
--------

* TODO

Usage
-----

Let's say we are running a simple web server using Bottle_:

.. code-block:: python

    import bottle

    @bottle.route('/hello/<name>')
    def index(name):
        return bottle.template('Hi {{name}}!', name=name)

    bottle.run(host='localhost', port=8080)

Or we have a client consuming such web service, using Requests_:

.. code-block:: python

    import requests
    import time

    requests.get('http://127.0.0.1:8080/hello/htmlviz'))
    time.sleep(10)
    requests.get('http://127.0.0.1:8080/bye'))

We can use htmlviz to generate a PlantUML_ sequence diagram showing the HTTP
transactions between the client and the server.

We can achieve this by instrumenting our code client side, e.g.:

.. code-block:: python

    import functools
    import htmlviz
    import requests
    import time

    requests_sniffer = htmlviz.RequestsSniffer(client_name="browser")
    get = functools.partial(requests.get, hooks={'response': requests_sniffer})
    get('http://127.0.0.1:8080/hello/htmlviz')
    time.sleep(10)
    get('http://127.0.0.1:8080/bye')
    htmlviz.seqdiag('client.html', sniffers=[requests_sniffer])

<client.html>

..  autonumber
    browser-> "127.0.0.1:8080": /hello/htmlviz
    "127.0.0.1:8080" --> browser: 200 OK
    note right of browser: Hi htmlviz!
    ...10 sec....
    browser-> "127.0.0.1:8080": /bye
    "127.0.0.1:8080" -[#red]-> browser: 404 Not Found
    note right of browser: <!DOCTYPE HTML\n PUBLIC "-//IETF...

.. image:: http://www.plantuml.com/plantuml/svg/XOx12e9054NtVSNJriwC8YGIBJ95oTA5BQ9QP4ufw0oCOr5Vto124LJtRUxYlCivTfAphicf685ABlYjfSAOWMvQ4qJKcQv37AAxW4jQrnoNigclrQF7Fo4mrEUmuO9522JB7cHSKX3LfPJ0poyYh62OqteC8MGIQEb95VHVAB_JBngxiQ35uLt69ZQikOI0TwpuvJJL5ecNRLCVmcmLxncactaSUQ0R64T-5YYp9m00

Or we can get a similar diagram modifying the server code. E.g:

.. code-block:: python

    import htmlviz
    import bottle

    bottle_sniffer = htmlviz.BottleSniffer(server_name="webserver")
    bottle.install(bottle_sniffer)

    @bottle.route('/hello/<name>')
    def index(name):
        return bottle.template('Hi {{name}}!', name=name)

    # Consumed to generate a new diagram
    @route('/seqdiagram')
    def seqdiagram:
        htmlviz.seqdiag('server.html', sniffers=[bottle_sniffer])

    bottle.run(host='localhost', port=8080)

..  autonumber
    "127.0.0.1:41232"-> "webserver": /hello/htmlviz
    "webserver" --> "127.0.0.1:41232": 200 OK
    note right of "127.0.0.1:41232": Hi htmlviz!
    ...10 sec....
    "127.0.0.1:41232"-> "webserver": /bye
    "webserver" -[#red]-> "127.0.0.1:41232": 404 Not Found
    note right of "127.0.0.1:41232": <!DOCTYPE HTML\n PUBLIC "-//IETF...

<server.html>

.. image:: http://www.plantuml.com/plantuml/svg/ZOvD2u9048Rl_OfnExkk9WGI7J95oRA37Q8wP4ufg0lhQjIlppuWA0_EN0RcUL-UOorvMHSnYW6qGtHZJ5cxkcNgniWWwXJ85UCAHOE2MA2bcETSIsMHDzdzdVd-GNtolnqM68n1k7ZH9PS88hka4lYvY_Ko-BGhhm2bL6TGuQazQ4_9-8R_QhkXmEJGBMWo4rPSWilhCkddEL7ceHrjrmvuqJBObx3Up0BV1g9gckz4Rclx0000

Credits
---------

The initial version of this package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Bottle: https://bottlepy.org/docs/dev
.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _PlantUML: http://plantuml.com/
.. _Requests: http://docs.python-requests.org
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
