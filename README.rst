===============================
htmlvis
===============================


.. image:: https://img.shields.io/pypi/v/htmlvis.svg
        :target: https://pypi.python.org/pypi/htmlvis
        :alt: Pypi Status

.. image:: https://img.shields.io/travis/qdamian/htmlvis.svg
        :target: https://travis-ci.org/qdamian/htmlvis
        :alt: Build Status

.. image:: https://coveralls.io/repos/github/qdamian/htmlvis/badge.svg
        :target: https://coveralls.io/github/qdamian/htmlvis
        :alt: Coverage Status

.. image:: https://readthedocs.org/projects/htmlvis/badge/?version=latest
        :target: https://htmlvis.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status

.. image:: https://pyup.io/repos/github/qdamian/htmlvis/shield.svg
     :target: https://pyup.io/repos/github/qdamian/htmlvis/
     :alt: Updates

HTML visualization for Python

.. image:: logo.png

Helps you visualize your app's HTTP traffic using sequence diagrams generated by
the amazing PlantUML_.

* Free software: MIT license
* Documentation: https://htmlvis.readthedocs.io


Features
--------

* TODO

Usage
-----

Let's say we are running a simple web server using Bottle_:

.. code-block:: python

    import bottle

    @bottle.route('/hello/<name>')
    def index(name):
        return bottle.template('Hi {{name}}!', name=name)

    bottle.run(host='localhost', port=8080)

Or we have a client consuming such web service, using Requests_:

.. code-block:: python

    import requests
    import time

    requests.get('http://127.0.0.1:8080/hello/htmlvis'))
    time.sleep(10)
    requests.get('http://127.0.0.1:8080/bye'))

We can use htmlvis to generate a PlantUML_ sequence diagram showing the HTTP
transactions between the client and the server.

We can achieve this by instrumenting our code client side, e.g.:

.. code-block:: python

    import functools
    import htmlvis
    import requests
    import time

    requests_sniffer = htmlvis.RequestsSniffer(client_name="browser")
    get = functools.partial(requests.get, hooks={'response': requests_sniffer})
    get('http://127.0.0.1:8080/hello/htmlvis')
    time.sleep(10)
    get('http://127.0.0.1:8080/bye')
    htmlvis.seqdiag('client.html', sniffers=[requests_sniffer])

<client.html>

..  autonumber
    browser-> "127.0.0.1:8080": /hello/htmlvis
    "127.0.0.1:8080" --> browser: 200 OK
    note right of browser: Hi htmlvis!
    ...10 sec....
    browser-> "127.0.0.1:8080": /bye
    "127.0.0.1:8080" -[#red]-> browser: 404 Not Found
    note right of browser: <!DOCTYPE HTML\n PUBLIC "-//IETF...

.. image:: http://www.plantuml.com/plantuml/svg/XOx12e9054NtVSNJriwC8YGIBJ95oTA5Bg9QP4ufw0oCOz7VDuXG1DLzcxiuxt9ElUIiRmig9g1I27xlg30Me9lM315rfkiGX-Wku8es3SULR9jRtGtu9mI6-XmtNB08WMGzW8nB2gA-LXBuvKM4DOnpse0XX4m27JshWluB5G_wHMC_5RGylilOn8Ojbn3mdfM_dERQAl6oNUf3c6tY0uCqNyQH1xg1SUHdWJ9x0W00

Or we can get a similar diagram modifying the server code. E.g:

.. code-block:: python

    import htmlvis
    import bottle

    bottle_sniffer = htmlvis.BottleSniffer(server_name="webserver")
    bottle.install(bottle_sniffer)

    @bottle.route('/hello/<name>')
    def index(name):
        return bottle.template('Hi {{name}}!', name=name)

    # Consumed to generate a new diagram
    @route('/seqdiagram')
    def seqdiagram:
        htmlvis.seqdiag('server.html', sniffers=[bottle_sniffer])

    bottle.run(host='localhost', port=8080)

..  autonumber
    "127.0.0.1:41232"-> "webserver": /hello/htmlvis
    "webserver" --> "127.0.0.1:41232": 200 OK
    note right of "127.0.0.1:41232": Hi htmlvis!
    ...10 sec....
    "127.0.0.1:41232"-> "webserver": /bye
    "webserver" -[#red]-> "127.0.0.1:41232": 404 Not Found
    note right of "127.0.0.1:41232": <!DOCTYPE HTML\n PUBLIC "-//IETF...

<server.html>

.. image:: http://www.plantuml.com/plantuml/svg/ZOx12e9048RlFSMudLrN4mA93fcYPEd13b4TCgSKr8LrDNhxp8AWF3Hp6PZl__bEZUHLKoOeHj0DqOqfPTtgbgaR4uEeSo0tJ6eKBGfYWPPXKN0jasNHvlKhy_c3-kI_Eomm68DmrTCLbmWYlsOI-6M8zN9ujojzW5AgCwZnt1tqJydaZhzg-x70z3WiQ38JDbo2ovig_SzpfYn3Ezv53dZnEZXK46qNWMy3KJNDTsAtitq0

Credits
---------

The initial version of this package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Bottle: https://bottlepy.org/docs/dev
.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _PlantUML: http://plantuml.com/
.. _Requests: http://docs.python-requests.org
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
